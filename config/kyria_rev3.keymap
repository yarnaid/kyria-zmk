/*
 * Copyright (c) 2023 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
// #include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

/* Uncomment this block if using RGB */
&led_strip {
    // chain-length = <6>;
    chain-length = <31>; // Uncomment if using both per-key and underglow LEDs
    // chain-length = <25>; // Uncomment if using only per-key LEDs.
};

/ {
    combos {
        compatible = "zmk,combos";

        l-br {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <4 5>;
        };

        r-br {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <6 7>;
        };

        l-par {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <16 17>;
        };

        r-par {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <18 19>;
        };

        l-brace {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <28 29>;
        };

        r-brace {
            bindings = <&none>;
            key-positions = <34 35>;
        };

        backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <18 19>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ---------------------------------------------------------------------------------------------------------------------------------
            // |  ESC  |  Q  |  W  |  E   |  R   |  T   |                                          |  Y   |  U    |  I    |  O   |   P   |   \  |
            // |  TAB  |  A  |  S  |  D   |  F   |  G   |                                          |  H   |  J    |  K    |  L   |   ;   |   '  |
            // | SHIFT |  Z  |  X  |  C   |  V   |  B   | L SHIFT | L SHIFT |  | LAYER 1 | L SHIFT |  N   |  M    |  ,    |  .   |   /   | CTRL |
            //                     | GUI  | DEL  | RET  |  SPACE  |   ESC   |  |   RET   |  SPACE  | TAB  | BSPC  | R-ALT |

            bindings = <
&kp TAB    &kp Q  &kp W  &kp E     &kp R    &kp T                                                                     &kp Y    &kp U     &kp I      &kp O    &kp P     &kp BSLH
&kp LCTRL  &kp A  &kp S  &kp D     &kp F    &kp G                                                                     &kp H    &kp J     &kp K      &kp L    &kp SEMI  &kp SQT
&kp LSHFT  &kp Z  &kp X  &kp C     &kp V    &kp B    &mo 1      &rgb_ug RGB_COLOR_HSB(125,98,47)  &mo 2    &kp LSHFT  &kp N    &kp M     &kp COMMA  &kp DOT  &kp FSLH  &kp RCTRL
                         &kp LGUI  &kp DEL  &kp RET  &kp SPACE  &kp ESC                           &kp RET  &kp SPACE  &kp TAB  &kp BSPC  &kp RALT
            >;

            // sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };

        numbers {
            // ---------------------------------------------------------------------------------------------------------------------------------
            // |       |      |BT_CLR|BTSEL0|BTSEL1|BTSEL2|                                         |      |      |      |      |      |      |
            // |       |      |      |BTSEL3|BTSEL4|      |                                         |      |      |      |      |      |      |
            // |       |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |
            //                       |      |      |      |      |      |      |      |      |      |      |      |      |

            bindings = <
&trans  &kp N1        &kp N2        &kp N3                 &kp N4                 &kp N5                                                 &kp N6    &kp N7  &kp N8    &kp N9     &kp N0  &trans
&trans  &bt BT_SEL 0  &bt BT_SEL 1  &trans                 &out OUT_TOG           &bt BT_CLR                                             &kp LEFT  &kp UP  &kp DOWN  &kp RIGHT  &trans  &trans
&trans  &trans        &trans        &kp LS(LA(LC(LG(A))))  &kp LS(LA(LC(LG(B))))  &kp LS(LA(LC(LG(C))))  &trans  &trans  &trans  &trans  &trans    &trans  &trans    &trans     &trans  &trans
                                    &trans                 &trans                 &trans                 &trans  &trans  &trans  &trans  &trans    &trans  &trans
            >;

            // sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };

        symbols {
            bindings = <
&trans  &kp EXCL         &kp AT           &kp HASH        &kp LS(DLLR)       &kp LS(PERCENT)                                  &kp CARET  &kp AMPS   &kp LS(ASTERISK)  &kp LS(LEFT_PARENTHESIS)  &kp LS(RIGHT_PARENTHESIS)  &kp BSPC
&trans  &rgb_ug RGB_TOG  &rgb_ug RGB_EFF  &kp K_MUTE      &kp K_VOLUME_DOWN  &kp K_VOL_UP                                     &kp MINUS  &kp EQUAL  &trans            &trans                    &kp BACKSLASH              &kp GRAVE
&trans  &bl BL_TOG       &bl BL_CYCLE     &kp C_PREVIOUS  &kp C_PP           &kp C_NEXT       &trans  &trans  &trans  &trans  &kp UNDER  &kp PLUS   &trans            &trans                    &kp PIPE                   &kp TILDE
                                          &trans          &trans             &trans           &trans  &trans  &trans  &trans  &trans     &trans     &trans
            >;
        };
    };
};
