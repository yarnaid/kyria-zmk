/*
 * Copyright (c) 2023 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

/* Uncomment this block if using RGB */

&led_strip {
    // chain-length = <6>;

    chain-length = <31>; // Uncomment if using both per-key and underglow LEDs
    // chain-length = <25>; // Uncomment if using only per-key LEDs.
};

/ {
    combos {
        compatible = "zmk,combos";

        l-br {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <4 5>;
        };

        r-br {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <6 7>;
        };

        l-par {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <16 17>;
        };

        r-par {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <18 19>;
        };

        l-brace {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <28 29>;
        };

        r-brace {
            bindings = <&none>;
            key-positions = <34 35>;
        };

        backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <18 19>;
        };

        rescape {
            bindings = <&gresc>;
            key-positions = <19 20>;
        };

        lescape {
            bindings = <&gresc>;
            key-positions = <16 15>;
        };
    };

    macros {
        doublealt: doublealt {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LALT &kp LALT>;
            label = "DOUBLEALT";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ---------------------------------------------------------------------------------------------------------------------------------
            // |  ESC  |  Q  |  W  |  E   |  R   |  T   |                                          |  Y   |  U    |  I    |  O   |   P   |   \  |
            // |  TAB  |  A  |  S  |  D   |  F   |  G   |                                          |  H   |  J    |  K    |  L   |   ;   |   '  |
            // | SHIFT |  Z  |  X  |  C   |  V   |  B   | L SHIFT | L SHIFT |  | LAYER 1 | L SHIFT |  N   |  M    |  ,    |  .   |   /   | CTRL |
            //                     | GUI  | DEL  | RET  |  SPACE  |   ESC   |  |   RET   |  SPACE  | TAB  | BSPC  | R-ALT |

            bindings = <
&kp TAB                  &kp Q           &kp W       &kp E          &kp R             &kp T                                                          &kp Y      &kp U          &kp I          &kp O       &kp P          &kp BACKSPACE
&kp LCTRL                &mt LG(LGUI) A  &mt LALT S  &mt LCTRL D    &mt LEFT_SHIFT F  &kp G                                                          &kp H      &mt RSHFT J    &mt RCTRL K    &mt RALT L  &mt RGUI SEMI  &kp SQT
&mt LEFT_SHIFT CAPSLOCK  &kp Z           &kp X       &kp C          &kp V             &kp B      &none        &none      &none      &none            &kp N      &kp M          &kp COMMA      &kp DOT     &kp FSLH       &kp ESCAPE
                                                     &kp LG(LS(A))  &doublealt        &lt 5 ESC  &lt 3 SPACE  &lt 4 TAB  &kp ENTER  &lt 1 BACKSPACE  &lt 2 DEL  &kp LG(SPACE)  &kp LA(LS(A))
            >;

            // sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };

        nav {
            // ---------------------------------------------------------------------------------------------------------------------------------
            // |       |      |BT_CLR|BTSEL0|BTSEL1|BTSEL2|                                         |      |      |      |      |      |      |
            // |       |      |      |BTSEL3|BTSEL4|      |                                         |      |      |      |      |      |      |
            // |       |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |
            //                       |      |      |      |      |      |      |      |      |      |      |      |      |

            bindings = <
&trans  &kp N1        &kp N2    &kp N3                 &kp N4                 &trans                                                         &kp LG(LS(K_REDO))  &kp LG(V)      &kp LG(C)     &kp LG(X)  &kp LG(Z)  &trans
&trans  &kp LEFT_GUI  &kp LALT  &kp LCTRL              &kp LEFT_SHIFT         &trans                                                         &kp LEFT            &kp DOWN       &kp UP_ARROW  &kp RIGHT  &kp CLCK   &trans
&trans  &trans        &trans    &kp LS(LA(LC(LG(A))))  &kp LS(LA(LC(LG(B))))  &kp LS(LA(LC(LG(C))))  &trans  &studio_unlock  &trans  &trans  &kp HOME            &kp PAGE_DOWN  &kp PG_UP     &kp END    &trans     &trans
                                &trans                 &trans                 &trans                 &trans  &trans          &trans  &trans  &trans              &trans         &trans
            >;

            // sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };

        media {
            bindings = <
&trans  &trans    &trans    &trans     &trans     &trans                                        &rgb_ug RGB_TOG    &rgb_ug RGB_EFF  &rgb_ug RGB_HUI    &rgb_ug RGB_SAI  &rgb_ug RGB_SPI  &trans
&trans  &kp LGUI  &kp LALT  &kp LCTRL  &kp LSHFT  &trans                                        &ext_power EP_TOG  &kp C_PREVIOUS   &kp K_VOLUME_DOWN  &kp K_VOL_UP     &kp C_NEXT       &kp C_PP
&trans  &trans    &trans    &trans     &trans     &trans  &trans  &trans  &trans      &trans    &out OUT_TOG       &bt BT_SEL 0     &bt BT_SEL 1       &bt BT_SEL 2     &bt BT_SEL 3     &bt BT_CLR
                            &trans     &trans     &trans  &trans  &trans  &kp C_STOP  &kp C_PP  &kp K_MUTE         &trans           &trans
            >;
        };

        num {
            bindings = <
&trans  &kp LBKT   &kp N7  &kp N8  &kp N9  &kp RBKT                                          &trans   &trans     &trans     &trans    &trans    &trans
&trans  &kp SEMI   &kp N4  &kp N5  &kp N6  &kp EQUAL                                         &trans   &kp RSHFT  &kp RCTRL  &kp RALT  &kp RGUI  &trans
&trans  &kp GRAVE  &kp N1  &kp N2  &kp N3  &kp BSLH    &trans  &trans     &trans     &trans  &trans   &trans     &trans     &trans    &trans    &trans
                           &trans  &trans  &kp PERIOD  &kp N0  &kp MINUS  &kp MINUS  &kp N0  &kp DOT  &trans     &trans
            >;
        };

        sym {
            bindings = <
&trans  &kp LEFT_BRACE  &kp AMPS    &kp ASTRK    &kp LPAR   &kp RBRC                                            &trans    &trans     &trans     &trans    &trans    &trans
&trans  &kp COLON       &kp DOLLAR  &kp PERCENT  &kp CARET  &kp PLUS                                            &trans    &kp RSHFT  &kp RCTRL  &kp RALT  &kp RGUI  &trans
&trans  &kp TILDE       &kp EXCL    &kp AT       &kp HASH   &kp PIPE  &trans    &trans     &trans     &trans    &trans    &trans     &trans     &trans    &trans    &trans
                                    &trans       &trans     &kp LPAR  &kp RPAR  &kp UNDER  &kp UNDER  &kp LPAR  &kp RPAR  &trans     &trans
            >;
        };

        fun {
            bindings = <
&trans  &kp F12  &kp F7  &kp F8  &kp F9  &kp PRINTSCREEN                                          &trans  &trans     &trans     &trans    &trans    &trans
&trans  &kp F11  &kp F4  &kp F5  &kp F6  &kp SCROLLLOCK                                           &trans  &kp RSHFT  &kp RCTRL  &kp RALT  &kp RGUI  &trans
&trans  &kp F10  &kp F1  &kp F2  &kp F3  &kp PAUSE_BREAK  &trans     &trans   &trans   &trans     &trans  &trans     &trans     &trans    &trans    &trans
                         &trans  &trans  &trans           &kp SPACE  &kp TAB  &kp TAB  &kp SPACE  &trans  &trans     &trans
            >;
        };
    };
};
